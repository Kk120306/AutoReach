// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    clerkId      String        @unique
    email        String        @unique
    firstName    String?       @unique
    lastName     String?       @unique
    createdAt    DateTime      @default(now())
    integrations Integration[]
    subscription Subscription?
    automations  Automation[]
}

model Subscription {
    id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String?           @unique @db.Uuid
    createdAt  DateTime          @default(now())
    plan       SUBSCRIPTION_PLAN @default(FREE)
    updatedAt  DateTime          @default(now())
    customerId String?           @unique
}

model Integration {
    id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name       INTEGRATIONS @default(INSTAGRAM)
    createdAt  DateTime     @default(now())
    User       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String?      @db.Uuid
    token      String?
    expiresAt  DateTime?
    insagramId String?      @unique
}

model Automation {
    id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name      String    @default("untitled")
    createdAt DateTime  @default(now())
    active    Boolean   @default(false)
    trigger   Trigger[]
    listener  Listener?
    posts     Post[]
    dms       Dms[]
    User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?   @db.Uuid
    keywords  Keyword[]
}

model Dms {
    id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
    automationId String?     @db.Uuid
    senderId     String?
    message      String?
    createdAt    DateTime    @default(now())
    reciever     String?
}

model Post {
    id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    postId       String
    caption      String?
    media        String
    mediaType    MEDIATYPE   @default(IMAGE)
    Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
    automationId String?     @db.Uuid
}

model Trigger {
    id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    type         String
    automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
    automationId String?     @db.Uuid
}

model Listener {
    id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    listener     LISTENERS  @default(MESSAGE)
    automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
    automationId String     @unique @db.Uuid
    prompt       String
    commentReply String?
    dmCount      Int        @default(0)
    commentCount Int        @default(0)
}

model Keyword {
    id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    word         String
    automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
    automationId String?     @db.Uuid

    @@unique([automationId, word])
}

enum SUBSCRIPTION_PLAN {
    FREE
    PRO
}

enum INTEGRATIONS {
    INSTAGRAM
    // FACEBOOK
    // TWITTER
    // LINKEDIN
    // TIKTOK
    // YOUTUBE
    // PINTEREST
    // SNAPCHAT
    // REDDIT
    // WHATSAPP
}

enum MEDIATYPE {
    IMAGE
    VIDEO
    CAROUSEL_ALBUM
}

enum LISTENERS {
    SMARTAI
    MESSAGE
}
